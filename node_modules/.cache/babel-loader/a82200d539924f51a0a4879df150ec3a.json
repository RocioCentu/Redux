{"ast":null,"code":"//accion que se va a utilizar en los componentes\nimport { AGREGAR_PRODUCTO, AGREGAR_PRODUCTO_EXITO, AGREGAR_PRODUCTO_ERROR, COMENZAR_DESCARGA_PRODUCTOS, DESCARGA_PRODUCTOS_EXITO, DESCARGA_PRODUCTOS_ERROR, OBTENER_PRODUCTO_ELIMINAR, PRODUCTO_ELIMINADO_EXITO, PRODUCTO_ELIMINADO_ERROR, OBTENER_PRODUCTO_EDITAR, COMENZAR_EDICION_PRODUCTO, PRODUCTO_EDITADO_EXITO, PRODUCTO_EDITADO_ERROR } from '../types';\nimport clienteAxios from '../config/axios';\nimport Swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function crearNuevoProductoAction(producto) {\n  return async dispatch => {\n    dispatch(agregarProducto());\n\n    try {\n      // insertar en la API\n      await clienteAxios.post('/productos', producto); // Si todo sale bien, actualizar el state\n\n      dispatch(agregarProductoExito(producto)); // Alerta\n\n      Swal.fire('Correcto', 'El producto se agregó correctamente', 'success');\n    } catch (error) {\n      console.log(error); // si hay un error cambiar el state\n\n      dispatch(agregarProductoError(true)); // alerta de error\n\n      Swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Hubo un error, intenta de nuevo'\n      });\n    }\n  };\n}\n\nconst agregarProducto = () => ({\n  type: AGREGAR_PRODUCTO,\n  payload: true\n}); // si el producto se guarda en la base de datos\n\n\nconst agregarProductoExito = producto => ({\n  type: AGREGAR_PRODUCTO_EXITO,\n  payload: producto\n}); // si hubo un error\n\n\nconst agregarProductoError = estado => ({\n  type: AGREGAR_PRODUCTO_ERROR,\n  payload: estado\n}); // Función que descarga los productos de la base de datos\n\n\nexport function obtenerProductosAction() {\n  return async dispatch => {\n    dispatch(descargarProductos());\n\n    try {\n      const respuesta = await clienteAxios.get('/productos');\n      dispatch(descargaProductosExitosa(respuesta.data));\n    } catch (error) {\n      console.log(error);\n      dispatch(descargaProductosError());\n    }\n  };\n}\n\nconst descargarProductos = () => ({\n  type: COMENZAR_DESCARGA_PRODUCTOS,\n  payload: true\n});\n\nconst descargaProductosExitosa = productos => ({\n  type: DESCARGA_PRODUCTOS_EXITO,\n  payload: productos\n});\n\nconst descargaProductosError = () => ({\n  type: DESCARGA_PRODUCTOS_ERROR,\n  payload: true\n}); // Selecciona y elimina el producto\n\n\nexport function borrarProductoAction(id) {\n  return async dispatch => {\n    dispatch(obtenerProductoEliminar(id));\n\n    try {\n      await clienteAxios.delete(`/productos/${id}`);\n      dispatch(eliminarProductoExito()); // Si se elimina, mostrar alerta\n\n      Swal.fire('Eliminado', 'El producto se eliminó correctamente', 'success');\n    } catch (error) {\n      console.log(error);\n      dispatch(eliminarProductoError());\n    }\n  };\n}\n\nconst obtenerProductoEliminar = id => ({\n  type: OBTENER_PRODUCTO_ELIMINAR,\n  payload: id\n});\n\nconst eliminarProductoExito = () => ({\n  type: PRODUCTO_ELIMINADO_EXITO\n});\n\nconst eliminarProductoError = () => ({\n  type: PRODUCTO_ELIMINADO_ERROR,\n  payload: true\n}); // Colocar producto en edición\n\n\nexport function obtenerProductoEditar(producto) {\n  return dispatch => {\n    dispatch(obtenerProductoEditarAction(producto));\n  };\n}\n\nconst obtenerProductoEditarAction = producto => ({\n  type: OBTENER_PRODUCTO_EDITAR,\n  payload: producto\n}); // Edita un registro en la api y state\n\n\nexport function editarProductoAction(producto) {\n  return async dispatch => {\n    dispatch(editarProducto());\n\n    try {\n      await clienteAxios.put(`/productos/${producto.id}`, producto);\n      dispatch(editarProductoExito(producto));\n    } catch (error) {\n      console.log(error);\n      dispatch(editarProductoError());\n    }\n  };\n}\n\nconst editarProducto = () => ({\n  type: COMENZAR_EDICION_PRODUCTO\n});\n\nconst editarProductoExito = producto => ({\n  type: PRODUCTO_EDITADO_EXITO,\n  payload: producto\n});\n\nconst editarProductoError = () => ({\n  type: PRODUCTO_EDITADO_ERROR,\n  payload: true\n});","map":{"version":3,"sources":["C:/Users/rocio/OneDrive/Escritorio/crudredux/src/actions/productoActions.js"],"names":["AGREGAR_PRODUCTO","AGREGAR_PRODUCTO_EXITO","AGREGAR_PRODUCTO_ERROR","COMENZAR_DESCARGA_PRODUCTOS","DESCARGA_PRODUCTOS_EXITO","DESCARGA_PRODUCTOS_ERROR","OBTENER_PRODUCTO_ELIMINAR","PRODUCTO_ELIMINADO_EXITO","PRODUCTO_ELIMINADO_ERROR","OBTENER_PRODUCTO_EDITAR","COMENZAR_EDICION_PRODUCTO","PRODUCTO_EDITADO_EXITO","PRODUCTO_EDITADO_ERROR","clienteAxios","Swal","crearNuevoProductoAction","producto","dispatch","agregarProducto","post","agregarProductoExito","fire","error","console","log","agregarProductoError","icon","title","text","type","payload","estado","obtenerProductosAction","descargarProductos","respuesta","get","descargaProductosExitosa","data","descargaProductosError","productos","borrarProductoAction","id","obtenerProductoEliminar","delete","eliminarProductoExito","eliminarProductoError","obtenerProductoEditar","obtenerProductoEditarAction","editarProductoAction","editarProducto","put","editarProductoExito","editarProductoError"],"mappings":"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","sourcesContent":["//accion que se va a utilizar en los componentes\r\nimport {\r\n    AGREGAR_PRODUCTO,\r\n    AGREGAR_PRODUCTO_EXITO,\r\n    AGREGAR_PRODUCTO_ERROR,\r\n    COMENZAR_DESCARGA_PRODUCTOS,\r\n    DESCARGA_PRODUCTOS_EXITO,\r\n    DESCARGA_PRODUCTOS_ERROR, \r\n    OBTENER_PRODUCTO_ELIMINAR,\r\n    PRODUCTO_ELIMINADO_EXITO,\r\n    PRODUCTO_ELIMINADO_ERROR,\r\n    OBTENER_PRODUCTO_EDITAR,\r\n    COMENZAR_EDICION_PRODUCTO,\r\n    PRODUCTO_EDITADO_EXITO,\r\n    PRODUCTO_EDITADO_ERROR\r\n} from '../types';\r\nimport clienteAxios from '../config/axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n// Crear nuevos productos\r\nexport function crearNuevoProductoAction(producto) {\r\n    return async (dispatch) => {\r\n        dispatch( agregarProducto() );\r\n\r\n        try {\r\n            // insertar en la API\r\n            await clienteAxios.post('/productos', producto);\r\n\r\n            // Si todo sale bien, actualizar el state\r\n           dispatch( agregarProductoExito(producto) );\r\n\r\n            // Alerta\r\n            Swal.fire(\r\n                'Correcto', \r\n                'El producto se agregó correctamente',\r\n                'success'\r\n            );\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            // si hay un error cambiar el state\r\n            dispatch( agregarProductoError(true) );\r\n\r\n            // alerta de error\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Hubo un error',\r\n                text: 'Hubo un error, intenta de nuevo'\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst agregarProducto = () => ({\r\n    type: AGREGAR_PRODUCTO,\r\n    payload: true\r\n});\r\n\r\n// si el producto se guarda en la base de datos\r\nconst agregarProductoExito = producto => ({\r\n    type: AGREGAR_PRODUCTO_EXITO,\r\n    payload: producto\r\n})\r\n\r\n// si hubo un error\r\nconst agregarProductoError = estado => ({\r\n    type: AGREGAR_PRODUCTO_ERROR,\r\n    payload: estado\r\n});\r\n\r\n\r\n// Función que descarga los productos de la base de datos\r\nexport function obtenerProductosAction() {\r\n    return async (dispatch) => {\r\n        dispatch( descargarProductos() );\r\n\r\n        try {\r\n            const respuesta = await clienteAxios.get('/productos');\r\n            dispatch( descargaProductosExitosa(respuesta.data) )\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch( descargaProductosError() )\r\n        }\r\n    }\r\n}\r\n\r\nconst descargarProductos = () => ({\r\n    type: COMENZAR_DESCARGA_PRODUCTOS,\r\n    payload: true\r\n});\r\n\r\nconst descargaProductosExitosa = productos => ({\r\n    type: DESCARGA_PRODUCTOS_EXITO,\r\n    payload: productos\r\n})\r\nconst descargaProductosError = () => ({\r\n    type: DESCARGA_PRODUCTOS_ERROR, \r\n    payload: true\r\n});\r\n\r\n// Selecciona y elimina el producto\r\nexport function borrarProductoAction(id) {\r\n    return async (dispatch) => {\r\n        dispatch(obtenerProductoEliminar(id) );\r\n\r\n        try {\r\n            await clienteAxios.delete(`/productos/${id}`);\r\n            dispatch( eliminarProductoExito() );\r\n\r\n            // Si se elimina, mostrar alerta\r\n            Swal.fire(\r\n                'Eliminado',\r\n                'El producto se eliminó correctamente',\r\n                'success'\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch( eliminarProductoError() );\r\n        }\r\n    }\r\n}\r\n\r\nconst obtenerProductoEliminar = id => ({\r\n    type: OBTENER_PRODUCTO_ELIMINAR,\r\n    payload: id\r\n});\r\nconst eliminarProductoExito = () => ({\r\n    type: PRODUCTO_ELIMINADO_EXITO\r\n})\r\nconst eliminarProductoError = () => ({\r\n    type: PRODUCTO_ELIMINADO_ERROR,\r\n    payload: true\r\n});\r\n\r\n// Colocar producto en edición\r\nexport function obtenerProductoEditar(producto) {\r\n    return (dispatch) => {\r\n        dispatch( obtenerProductoEditarAction(producto) )\r\n    }\r\n}\r\n\r\nconst obtenerProductoEditarAction = producto => ({\r\n    type: OBTENER_PRODUCTO_EDITAR,\r\n    payload: producto\r\n})\r\n\r\n// Edita un registro en la api y state\r\nexport function editarProductoAction(producto) {\r\n    return async (dispatch) => {\r\n        dispatch( editarProducto() );\r\n\r\n        try {\r\n            await clienteAxios.put(`/productos/${producto.id}`, producto);    \r\n            dispatch( editarProductoExito(producto) );\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch( editarProductoError() );\r\n        }\r\n    }\r\n}\r\nconst editarProducto = () => ({\r\n    type: COMENZAR_EDICION_PRODUCTO\r\n});\r\n\r\nconst editarProductoExito = producto => ({\r\n    type: PRODUCTO_EDITADO_EXITO,\r\n    payload: producto\r\n});\r\n\r\nconst editarProductoError = () => ({\r\n    type: PRODUCTO_EDITADO_ERROR,\r\n    payload: true\r\n})"]},"metadata":{},"sourceType":"module"}